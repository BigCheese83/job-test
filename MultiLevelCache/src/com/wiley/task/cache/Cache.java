package com.wiley.task.cache;

import java.io.Serializable;

/**
 * Базовый интерфейс для любого вида кэша.
 *
 * @param <K> тип идентификаторов объектов в кэше
 * @param <V> тип объектов в кэше
 * @see     MemoryCache
 * @see     FileSystemCache
 * @see     MultiLevelCache
 */
public interface Cache<K extends Serializable, V extends Serializable> {
    /**
     * Помещает объект с заданным уникальным идентификатором в кэш.
     * Если кэш заполнен, то возвращает удаленный элемент в соответствии с заданной стратегией вытеснения,
     * или <tt>null</tt> в противном случае.
     * @param id уникальный идентификатор объекта
     * @param value значение объекта
     * @return удаленный элемент кэша в соответствии с заданной стратегией вытеснения
     */
    CacheEntry<K, V> put(K id, V value);

    /**
     * Возвращает элемент кэша с заданным идентификатором в виде экземпляра класса CacheEntry,
     * или <tt>null</tt>, если элемент не найден в кэше.
     * @param id уникальный идентификатор объекта
     * @return элемент кэша
     */
    CacheEntry<K, V> get(K id);

    /**
     * Удаляет элемент с заданным идентификатором из кэша.
     * Возвращает удаленный элемент в виде экземпляра класса CacheEntry,
     * или <tt>null</tt>, если элемент не найден в кэше.
     * @param id уникальный идентификатор объекта
     * @return удаленный элемент кэша
     */
    CacheEntry<K, V> remove(K id);

    /**
     * Удаляет все элементы из кэша.
     */
    void clear();

    /**
     * Возвращает число элементов в кэше.
     * @return Возвращает число элементов в кэше
     */
    long size();

    /**
     * Возвращает <tt>true</tt>, если кэш полностью заполнен.
     * @return <tt>true</tt>, если кэш полностью заполнен
     */
    boolean isFull();

    /**
     * Печать содержимого кэша в стандартный вывод (консоль).
     * Использовать только в отладочных целях.
     */
    void print();
}
